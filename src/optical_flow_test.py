#!/usr/bin/env python

import rospy
import cv2
import numpy as np
from cv_bridge import CvBridge, CvBridgeError
from sensor_msgs.msg import Image
from geometry_msgs.msg import Point
import math
import time
import classes as cl
import tf
import copy

class Motion:
    def __init__(self):
        #step1: initialize node, publishers, subscribers
        
        rospy.init_node("motion_detector_node")
        
        self.sub6 = rospy.Subscriber("usb_cam_k/image_raw", Image, self.imageCallback6)
        self.pub6 = rospy.Publisher('camera/visible/opticalFlow', Image, queue_size=2)
        self.bridge = CvBridge()
        self.motion_detector6 = cl.optical_flow()
        # self.sub1 = rospy.Subscriber("usb_cam_k/image_raw", Image, self.imageCallback1)

        #step3: if the corner match type is 'point-line' (match type is generated by class Predictor), detect the line info
        # v5_primitive kong go to the fix position
        
        rospy.spin()

    def imageCallback6(self,image):
        cv_image = self.bridge.imgmsg_to_cv2(image, "bgr8")

        img=self.motion_detector6.get_optical_flow(cv_image) #if there is blue color, return 1
        if img is not None:
            image = self.bridge.cv2_to_imgmsg(img)
            self.pub6.publish(image)



if __name__ == '__main__':
    detector = Motion()